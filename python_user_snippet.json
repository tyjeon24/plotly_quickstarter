{
	"기본 코드":{
		"prefix":"user_code_snippet_plotly_1_basic",
		"body":[
				"from plotly.subplots import make_subplots",
				"import plotly.graph_objects as go",
				"",
				"fig = make_subplots(rows=3, cols=1,shared_xaxes=True,vertical_spacing=0.02)",
				"fig.add_trace(go.Scatter(x=[0, 1, 2], y=[10, 11, 12], name='PLOT 1'),row=3, col=1)",
				"fig.add_trace(go.Scatter(x=[2, 3, 4], y=[100, 110, 120], name='PLOT 2'),row=2, col=1)",
				"fig.add_trace(go.Scatter(x=[3, 4, 5], y=[1000, 1100, 1200], name='PLOT 3'),row=1, col=1)",
				"fig.update_layout(height=600, width=600,title_text='Stacked Subplots with Shared X-Axes', title_x=0.5)",
				"fig.show()",
				"import plotly.graph_objects as go",
				"from plotly.subplots import make_subplots",
				"",
				"fig = make_subplots(specs=[[{'secondary_y': True}]])",
				"fig.add_trace(go.Scatter(x=[1, 2, 3], y=[40, 50, 60], name='왼쪽'),secondary_y=False)",
				"fig.add_trace(go.Scatter(x=[2, 3, 4], y=[4, 5, 6], name='오른쪽'),secondary_y=True)",
				"fig.update_layout(title_text='제목', title_x=0.5)",
				"fig.update_xaxes(title_text='X축 제목')",
				"fig.update_yaxes(title_text='&lt;b&gt;왼쪽 제목&lt;/b&gt;', secondary_y=False)",
				"fig.update_yaxes(title_text='오른쪽 제목', secondary_y=True)",
				"fig.show()"
		]
	},
	"콜백+부트스트랩":{
		"prefix":"user_code_snippet_dash_1_basic",
		"body":[
				"import dash",
				"import dash_bootstrap_components as dbc",
				"from dash import Input, Output, html",
				"",
				"white_button_style = {'background-color': 'white', 'color': 'black'}",
				"red_button_style = {'background-color': 'red', 'color': 'white'}",
				"",
				"app = dash.Dash(external_stylesheets=[dbc.themes.DARKLY])",
				"click_counter_button = dbc.Button('Click me', className='me-2', n_clicks=0)",
				"app.layout = html.Div([click_counter_button, number_of_click_text := html.Span()])",
				"",
				"",
				"@app.callback(",
				"    [Output(number_of_click_text, 'children'),",
				"     Output(click_counter_button, 'children'),",
				"     Output(click_counter_button, 'style')],",
				"    [Input(click_counter_button, 'n_clicks')],",
				")",
				"def on_button_click(n):",
				"    style = red_button_style",
				"    if n % 2 == 0:",
				"        style = white_button_style",
				"    return f'Clicked {n} times.', n, style",
				"",
				"",
				"if __name__ == '__main__':",
				"    app.run_server()"
		]
	},
	"애니메이션":{
		"prefix":"user_code_snippet_dash_2_animation",
		"body":[
				"from dash import Dash, dcc, html, Input, Output, clientside_callback, State",
				"import pandas as pd",
				"import numpy as np",
				"",
				"df = pd.DataFrame({",
				"    'x' : [i for i in range(10000)],",
				"    'phase_1' : [np.sin(4*np.pi*i*0.01) for i in range(10000)],",
				"    'phase_2' : [np.sin(4*np.pi*i*0.01 - 2*(np.pi)/3) for i in range(10000)],",
				"    'phase_3' : [np.sin(4*np.pi*i*0.01 - (np.pi)/3) for i in range(10000)],",
				"})",
				"",
				"app = Dash(__name__)",
				"app.layout = html.Div([",
				"    dcc.Graph(id='clientside-graph'),",
				"    dcc.Interval(id='interval', interval=25),",
				"    dcc.Store(id='sin_wave',data=df.to_dict('list'))",
				"])",
				"",
				"clientside_callback(",
				"    '''",
				"    function(n_intervals, data) {",
				"            return [{",
				"            'data':[",
				"                        {",
				"                            'x':data['x'].slice(0,n_intervals),",
				"                            'y':data['phase_1'].slice(0,n_intervals)",
				"                        },",
				"                        {",
				"                            'x':data['x'].slice(0,n_intervals),",
				"                            'y':data['phase_2'].slice(0,n_intervals)",
				"                        },",
				"                        {",
				"                            'x':data['x'].slice(0,n_intervals),",
				"                            'y':data['phase_3'].slice(0,n_intervals)",
				"                        }",
				"                    ]",
				"                },",
				"            ];",
				"        }",
				"    ''',",
				"    [Output('clientside-graph', 'figure')],",
				"    [Input('interval', 'n_intervals')],",
				"    [State('sin_wave', 'data')],",
				")",
				"",
				"if __name__ == '__main__':",
				"    app.run(debug=True)"
		]
	},
	"비동기 요청":{
		"prefix":"user_code_snippet_async_1_requests",
		"body":[
			"# https://www.twilio.com/blog/asynchronous-http-requests-in-python-with-aiohttp",
			"import aiohttp",
			"import asyncio",
			"import sys",
			"import time",
			"",
			"if USING_NOTEBOOK:='ipykernel' in sys.modules:",
			"    import nest_asyncio",
			"    nest_asyncio.apply()",
			"",
			"start = time.time()",
			"",
			"async def get_info(session, url):",
			"    async with session.get(url) as resp:",
			"        response = await resp.json()",
			"        data = response['name']",
			"        return data",
			"",
			"async def main():",
			"    async with aiohttp.ClientSession() as session:",
			"        tasks = [asyncio.ensure_future(get_info(session, f'https://pokeapi.co/api/v2/pokemon/{number}')) for number in range(1, 151)]",
			"        result = await asyncio.gather(*tasks)",
			"    return result",
			"",
			"result = asyncio.run(main())",
			"print(result)",
			"print(time.time() - start)"
		]
	}
}